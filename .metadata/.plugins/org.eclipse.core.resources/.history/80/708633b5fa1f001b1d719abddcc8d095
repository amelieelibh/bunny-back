package com.bunnystudio.users.infrastructure;

import java.util.List;
import java.util.concurrent.CompletableFuture;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Positive;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bunnystudio.users.application.TaskService;
import com.bunnystudio.users.domain.UserDto;

@Validated
@RestController
@RequestMapping(value = {"api/users"})
public class TaskController {
	
	@Autowired
	private TaskService userService;

	@GetMapping(value = {"/"},
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public CompletableFuture<ResponseEntity<List<UserDto>>> getUsers(){
		return CompletableFuture.supplyAsync(() -> new ResponseEntity<>(
				userService.getAll(), HttpStatus.OK));
	}
	
	@GetMapping(value = {"/{userId}"},
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public CompletableFuture<ResponseEntity<UserDto>> findUsers(
			@Valid @Positive(message = "userId must be a positive long")
			@PathVariable(required = true, name = "userId") Long userId){
		return CompletableFuture.supplyAsync(() -> new ResponseEntity<>(
				userService.findUser(userId.longValue()), HttpStatus.OK));
	}
	
	@PostMapping(path = {"/"},
			produces = {MediaType.APPLICATION_JSON_VALUE},
			consumes = {MediaType.APPLICATION_JSON_VALUE})
	public CompletableFuture<ResponseEntity<UserDto>> addUser(
			@RequestBody 
			@Valid @NotNull(message = "user to add is required")
			UserDto user){
		return CompletableFuture.supplyAsync(() -> new ResponseEntity<>(
				userService.addUser(user), HttpStatus.OK));
	}
	
	@PutMapping(path = {"/"},
			produces = {MediaType.APPLICATION_JSON_VALUE},
			consumes = {MediaType.APPLICATION_JSON_VALUE})
	public CompletableFuture<ResponseEntity<UserDto>> updateUser(
			@Valid @NotNull(message = "user to add is required")
			@RequestBody UserDto user){
		return CompletableFuture.supplyAsync(() -> new ResponseEntity<>(
				userService.updateUser(user), HttpStatus.OK));
	}
	
	@DeleteMapping(path = {"/{userId}"},
			produces = {MediaType.APPLICATION_JSON_VALUE},
			consumes = {MediaType.APPLICATION_JSON_VALUE})
	public CompletableFuture<ResponseEntity<UserDto>> deleteUser(
			@Valid @Positive(message = "userId must be a positive long")
			@PathVariable(required = true, name = "userId") long userId){
		return CompletableFuture.supplyAsync(() -> new ResponseEntity<>(userService.deleteUser(userId), HttpStatus.OK));
	}
	
}
