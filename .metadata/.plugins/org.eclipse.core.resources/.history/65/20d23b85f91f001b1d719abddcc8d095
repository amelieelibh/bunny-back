package com.bunnystudio.users.application;

import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.validation.annotation.Validated;

import com.bunnystudio.users.domain.RegexValidators;
import com.bunnystudio.users.domain.TaskDto;
import com.bunnystudio.users.domain.TaskRepository;
import com.bunnystudio.users.domain.TaskUtil;
import com.bunnystudio.users.domain.documents.Task;
import com.bunnystudio.users.domain.documents.User;
import com.bunnystudio.users.infrastructure.InvalidValueException;
import com.bunnystudio.users.infrastructure.NotFoundException;
import com.google.common.base.Strings;

@Validated
@Service
public class TaskService {

	@Autowired
	private TaskRepository taskRepository;

	public List<TaskDto> getAll() {
		return taskRepository.findAll().stream()
				.map(TaskUtil::convertToDto)
				.collect(Collectors.toList());
	}

	public TaskDto findUser(long taskId) {
		Task task = taskRepository.findById(taskId)
				.orElseThrow(() -> new NotFoundException(taskId));
		return TaskUtil.convertToDto(task);
	}

	public TaskDto addUser(@Valid TaskDto taskDto) {
		if(taskDto.getUserId() <= 0) {
			throw new InvalidValueException("UserId is required. Invalid userId: " + taskDto.getUserId());
		}
			
		Task savedTask = taskRepository.save(TaskUtil.convertToDocument(taskDto));
		return TaskUtil.convertToDto(savedTask);
	}

	public TaskDto updateUser(@Valid TaskDto TaskDto) {
		User user = taskRepository.findById(TaskDto.getId())
				.orElseThrow(() -> new NotFoundException(TaskDto.getId()));
		user.setName(TaskDto.getName());
		User savedUser = taskRepository.save(user);
		return TaskUtil.convertToDto(savedUser);
	}

	public TaskDto deleteUser(@Valid long userId) {
		User user = taskRepository.findById(userId)
				.orElseThrow(() -> new NotFoundException(userId));
		taskRepository.delete(user);
		return TaskUtil.convertToDto(user);
	}

	
}
