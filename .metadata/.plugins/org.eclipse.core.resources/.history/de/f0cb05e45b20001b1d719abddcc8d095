package com.bunnystudio.users;

import org.mockito.InjectMocks;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;

import com.bunnystudio.users.application.UserService;
import com.bunnystudio.users.domain.UserRepository;
import com.bunnystudio.users.domain.documents.User;

import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.cucumber.messages.internal.com.google.gson.Gson;
import io.cucumber.spring.CucumberContextConfiguration;

import static org.junit.Assert.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isNull;
import static org.junit.Assert.assertTrue;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.asyncDispatch;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


//@CucumberContextConfiguration
//@SpringBootTest
public class UsersStepsTest {


    @Autowired
    protected MockMvc mvc;
    @Autowired
    @InjectMocks
    protected UserService userService;
	@MockBean
	public UserRepository userRepo;
	
	private User user;
	private String response;
	private Gson gson = new Gson();

	@Given("A new user data with name {string}")
	public void aNewUserDataWithName(String name) throws Exception  {
		user = User.builder()
				.name(name)
				.build();
	}
	
	@Given("An existent user named as {string} with userId {long}")
	public void aNewUserDataWithName(String name, long userId) throws Exception  {
		user = User.builder()
				.name(name)
				.build();
	}
	
	
	
	@When("I try to add it to db via ws")
	public void iTryToAddItToDbViaWs() throws Exception {
		String body = gson.toJson(user);
		
		MvcResult mvcResult = mvc.perform(post("/api/users/")
				.contentType(MediaType.APPLICATION_JSON_VALUE)
				.accept(MediaType.APPLICATION_JSON_VALUE)
				.content(body))
				.andReturn();
		
        mvcResult.getRequest().getAsyncContext().setTimeout(10000);

		mvcResult = mvc
				.perform(asyncDispatch(mvcResult))
				.andExpect(status().isOk())
				.andReturn();
		
		response = mvcResult.getResponse().getContentAsString();
	}
	
	@Then("I validate that userId is present and name matches to {string}")
	public void iValidateThatUserIdIsPresentAndNameMatchesTo(String name) {
		User user = gson.fromJson(response, User.class);
		assertNotNull(user);
		assertTrue(user.getId() > 0);
		assertEquals(name, user.getName());
	}
	
	

	@Before
	public void init() {
		MockitoAnnotations.initMocks(this);
		userRepo = Mockito.mock(UserRepository.class);
		
	}
}
